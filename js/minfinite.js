// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, FSM,
    __slice = [].slice;

  EventEmitter = require("events").EventEmitter;

  module.exports = FSM = (function() {

    function FSM(initial_state) {
      if (initial_state == null) {
        initial_state = "START";
      }
      this.state = initial_state;
      this.emitter = new EventEmitter();
    }

    FSM.prototype.define = function(table) {
      if (this.validate(table)) {
        return this.table = table;
      } else {
        throw new Error("Invalid state table");
      }
    };

    FSM.prototype.validate = function(table) {
      var action, def, event, next, state, transition;
      for (state in table) {
        def = table[state];
        if (!(Object.keys(def).length > 0)) {
          return false;
        }
        for (event in def) {
          transition = def[event];
          action = transition.action, next = transition.next;
          if (typeof action !== "function") {
            console.log("Action for " + state + ", " + event + " is not a function");
            return false;
          }
          if (typeof next !== "string") {
            console.log("Next state for " + state + ", " + event + " is not a string");
            return false;
          }
          if (!table[next]) {
            console.log("Next state for " + state + ", " + event + " does not exist");
            return false;
          }
        }
      }
      return true;
    };

    FSM.prototype.event = function() {
      var action, args, current_state, name, next, transition;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      current_state = this.state;
      transition = this.table[this.state][name];
      if (!transition) {
        console.error("State(" + this.state + ") has no transition for Event(" + name + ")");
      } else {
        action = transition.action, next = transition.next;
        action.apply(null, args);
        this.state = next;
      }
      if (this.state !== current_state) {
        return this.emitter.emit(this.state);
      }
    };

    return FSM;

  })();

}).call(this);
